0:                   
0: 56                labelnull: nop
1: 3                 eax: .integer #3
2: 0                 ebx: .integer #0
3: 0                 ecx: .integer #0
4: 0                 edx: .integer #0
5: 0                 esi: .integer #0
6: 0                 edi: .integer #0
7: 0                 esp: .integer #0
8: 0                 ebp: .integer #0
9: 0 0 0 0           bin1: .allocate #32
41: 0 0 0 0          bin2: .allocate #32
73: 0 0 0 0          bin3: .allocate #32
105: 1               endl: .integer #1
106: 10                  .integer #10
107: 1 7             tobinary: clrr r7
109: 5 32 9              movir #32 r9
112: 4 2 9               clrb r2 r9
115: 33 0 1              cmpir #0 r1
118: 37 181              jmpz tobinret
120: 12 32 2             addir #32 r2
123: 6 1 5           biniter: movrr r1 r5
126: 24 2 1              divir #2 r1
129: 6 1 8               movrr r1 r8
132: 20 2 1              mulir #2 r1
135: 34 1 5              cmprr r1 r5
138: 6 8 1               movrr r8 r1
141: 1 6                 clrr r6
143: 57 147              jmpne remainder1
145: 37 150              jmpz remainder0
147: 5 1 6           remainder1: movir #1 r6
150: 33 0 5          remainder0: cmpir #0 r5
153: 37 162              jmpz endbin
155: 41 6                push r6
157: 12 1 7              addir #1 r7
160: 28 123              jmp biniter
162: 17 7 2          endbin: subrr r7 r2
165: 42 6            ebiniter: pop r6
167: 53 6 2              movrx r6 r2
170: 12 1 2              addir #1 r2
173: 16 1 7              subir #1 r7
176: 33 0 7              cmpir #0 r7
179: 57 165              jmpne ebiniter
181: 40              tobinret: ret
182: 5 1 0           power: movir #1 r0
185: 33 0 2              cmpir #0 r2
188: 37 201              jmpz endpower
190: 21 1 0          poweriter: mulrr r1 r0
193: 16 1 2              subir #1 r2
196: 33 0 2              cmpir #0 r2
199: 57 190              jmpne poweriter
201: 40              endpower: ret
202: 12 31 1         todecimal: addir #31 r1
205: 1 0                 clrr r0
207: 1 5                 clrr r5
209: 9 1 6           todeciter: movxr r1 r6
212: 41 1                push r1
214: 41 2                push r2
216: 41 0                push r0
218: 5 2 1               movir #2 r1
221: 6 5 2               movrr r5 r2
224: 39 182              jsr power
226: 21 0 6              mulrr r0 r6
229: 42 0                pop r0
231: 42 2                pop r2
233: 42 1                pop r1
235: 13 6 0              addrr r6 r0    
238: 12 1 5              addir #1 r5
241: 16 1 1              subir #1 r1
244: 33 32 5             cmpir #32 r5
247: 57 209              jmpne todeciter
249: 40                  ret
250: 41 1            low16: push r1 ; call tobinary *r1 &bin2
252: 6 1 1               movrr r1 r1
255: 9 1 1               movxr r1 r1
258: 41 2                push r2
260: 10 41 2             movar bin2 r2
263: 39 107              jsr tobinary
265: 42 2                pop r2
267: 42 1                pop r1
269: 10 9 5              movar bin1 r5
272: 5 16 6              movir #16 r6
275: 4 5 6               clrb r5 r6
278: 10 9 1              movar bin1 r1
281: 39 202              jsr todecimal
283: 40                  ret
284: 41 1            high8: push r1 ; call tobinary *r1 &bin2
286: 6 1 1               movrr r1 r1
289: 9 1 1               movxr r1 r1
292: 41 2                push r2
294: 10 41 2             movar bin2 r2
297: 39 107              jsr tobinary
299: 42 2                pop r2
301: 42 1                pop r1
303: 10 9 5              movar bin1 r5
306: 12 16 5             addir #16 r5
309: 6 5 6               movrr r5 r6
312: 12 8 6              addir #8 r6
315: 5 8 7               movir #8 r7
318: 11 5 6 7            movb r5 r6 r7
322: 10 9 5              movar bin1 r5
325: 5 24 6              movir #24 r6
328: 4 5 6               clrb r5 r6
331: 10 9 1              movar bin1 r1
334: 39 202              jsr todecimal
336: 40                  ret
337: 41 1            low8: push r1 ; call tobinary *r1 &bin1
339: 6 1 1               movrr r1 r1
342: 9 1 1               movxr r1 r1
345: 41 2                push r2
347: 10 9 2              movar bin1 r2
350: 39 107              jsr tobinary
352: 42 2                pop r2
354: 42 1                pop r1
356: 10 9 5              movar bin1 r5
359: 5 24 6              movir #24 r6
362: 4 5 6               clrb r5 r6
365: 10 9 1              movar bin1 r1
368: 39 202              jsr todecimal
370: 40                  ret
371: 41 1            setlow16: push r1 ; call tobinary *r1 &bin1
373: 6 1 1               movrr r1 r1
376: 9 1 1               movxr r1 r1
379: 41 2                push r2
381: 10 9 2              movar bin1 r2
384: 39 107              jsr tobinary
386: 42 2                pop r2
388: 42 1                pop r1
390: 41 1                push r1 ; call tobinary r2 &bin2
392: 6 2 1               movrr r2 r1
395: 41 2                push r2
397: 10 41 2             movar bin2 r2
400: 39 107              jsr tobinary
402: 42 2                pop r2
404: 42 1                pop r1
406: 10 41 5             movar bin2 r5
409: 10 9 6              movar bin1 r6
412: 12 16 5             addir #16 r5
415: 12 16 6             addir #16 r6
418: 5 16 7              movir #16 r7
421: 11 5 6 7            movb r5 r6 r7
425: 41 1                push r1 ; call todecimal &bin1
427: 10 9 1              movar bin1 r1
430: 39 202              jsr todecimal
432: 42 1                pop r1
434: 53 0 1              movrx r0 r1
437: 40                  ret
438: 41 1            setlow8: push r1 ; call tobinary *r1 &bin1
440: 6 1 1               movrr r1 r1
443: 9 1 1               movxr r1 r1
446: 41 2                push r2
448: 10 9 2              movar bin1 r2
451: 39 107              jsr tobinary
453: 42 2                pop r2
455: 42 1                pop r1
457: 41 1                push r1 ; call tobinary r2 &bin2
459: 6 2 1               movrr r2 r1
462: 41 2                push r2
464: 10 41 2             movar bin2 r2
467: 39 107              jsr tobinary
469: 42 2                pop r2
471: 42 1                pop r1
473: 10 41 5             movar bin2 r5
476: 10 9 6              movar bin1 r6
479: 12 24 5             addir #24 r5
482: 12 24 6             addir #24 r6
485: 5 8 7               movir #8 r7
488: 11 5 6 7            movb r5 r6 r7
492: 41 1                push r1 ; call todecimal &bin1
494: 10 9 1              movar bin1 r1
497: 39 202              jsr todecimal
499: 42 1                pop r1
501: 53 0 1              movrx r0 r1
504: 40                  ret
505: 41 1            sethigh8: push r1 ; call tobinary *r1 &bin1
507: 6 1 1               movrr r1 r1
510: 9 1 1               movxr r1 r1
513: 41 2                push r2
515: 10 9 2              movar bin1 r2
518: 39 107              jsr tobinary
520: 42 2                pop r2
522: 42 1                pop r1
524: 41 1                push r1 ; call tobinary r2 &bin2
526: 6 2 1               movrr r2 r1
529: 41 2                push r2
531: 10 41 2             movar bin2 r2
534: 39 107              jsr tobinary
536: 42 2                pop r2
538: 42 1                pop r1
540: 10 41 5             movar bin2 r5
543: 10 9 6              movar bin1 r6
546: 12 24 5             addir #24 r5
549: 12 16 6             addir #16 r6
552: 5 8 7               movir #8 r7
555: 11 5 6 7            movb r5 r6 r7
559: 41 1                push r1 ; call todecimal &bin1
561: 10 9 1              movar bin1 r1
564: 39 202              jsr todecimal
566: 42 1                pop r1
568: 53 0 1              movrx r0 r1
571: 40                  ret
572: 41 1            x86push: push r1 ; addim #1 esp
574: 8 7 1               movmr esp r1
577: 12 1 1              addir #1 r1
580: 7 1 7               movrm r1 esp
583: 42 1                pop r1
585: 8 7 4               movmr esp r4
588: 53 1 4              movrx r1 r4
591: 40                  ret
592: 8 7 4           x86pop: movmr esp r4
595: 9 4 0               movxr r4 r0
598: 41 1                push r1 ; subim #1 esp
600: 8 7 1               movmr esp r1
603: 16 1 1              subir #1 r1
606: 7 1 7               movrm r1 esp
609: 42 1                pop r1
611: 40                  ret
612: 39 592          x86ret: jsr x86pop ; call x86pop
614: 10 623 4            movar retval r4
617: 12 1 4              addir #1 r4
620: 53 0 4              movrx r0 r4
623: 28 0            retval: jmp labelnull
625: 5 0 5           bitwiseand: movir #0 r5
628: 9 1 6           anditer: movxr r1 r6
631: 9 2 7               movxr r2 r7
634: 33 1 6              cmpir #1 r6
637: 57 651              jmpne andset0
639: 34 6 7              cmprr r6 r7
642: 37 646              jmpz andset1
644: 57 651              jmpne andset0
646: 5 1 8           andset1: movir #1 r8
649: 28 654              jmp andnoset
651: 5 0 8           andset0: movir #0 r8
654: 53 8 3          andnoset: movrx r8 r3
657: 12 1 1              addir #1 r1
660: 12 1 2              addir #1 r2
663: 12 1 3              addir #1 r3
666: 12 1 5              addir #1 r5
669: 33 32 5             cmpir #32 r5
672: 57 628              jmpne anditer
674: 40                  ret
675: 41 1            x86init: push r1 ; call tobinary #13 &bin1
677: 5 13 1              movir #13 r1
680: 41 2                push r2
682: 10 9 2              movar bin1 r2
685: 39 107              jsr tobinary
687: 42 2                pop r2
689: 42 1                pop r1
691: 41 1                push r1 ; call tobinary #7 &bin2
693: 5 7 1               movir #7 r1
696: 41 2                push r2
698: 10 41 2             movar bin2 r2
701: 39 107              jsr tobinary
703: 42 2                pop r2
705: 42 1                pop r1
707: 41 1                push r1 ; call bitwiseand &bin1 &bin2 &bin3
709: 10 9 1              movar bin1 r1
712: 41 2                push r2
714: 10 41 2             movar bin2 r2
717: 41 3                push r3
719: 10 73 3             movar bin3 r3
722: 39 625              jsr bitwiseand
724: 42 3                pop r3
726: 42 2                pop r2
728: 42 1                pop r1
730: 41 1                push r1 ; call todecimal &bin3
732: 10 73 1             movar bin3 r1
735: 39 202              jsr todecimal
737: 42 1                pop r1

Symbol Table:
ebp 8 
ebiniter 165 
esp 7 
tobinary 107 
remainder1 147 
labelnull 0 
sethigh8 505 
endpower 201 
todecimal 202 
x86push 572 
x86pop 592 
anditer 628 
low8 337 
andnoset 654 
ebx 2 
biniter 123 
power 182 
andset1 646 
low16 250 
retval 623 
andset0 651 
esi 5 
todeciter 209 
endl 105 
bitwiseand 625 
edi 6 
edx 4 
bin1 9 
eax 1 
ecx 3 
setlow16 371 
x86ret 612 
bin3 73 
poweriter 190 
remainder0 150 
high8 284 
bin2 41 
endbin 162 
tobinret 181 
setlow8 438 
x86init 675 
