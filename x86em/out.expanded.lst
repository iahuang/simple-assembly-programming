0:                   
0: 56                labelnull: nop
1: 3                 eax: .integer #3
2: 0                 ebx: .integer #0
3: 0                 ecx: .integer #0
4: 0                 edx: .integer #0
5: 0                 esi: .integer #0
6: 0                 edi: .integer #0
7: 0                 esp: .integer #0
8: 0                 ebp: .integer #0
9: 0                 zf: .integer #0
10: 0                cf: .integer #0
11: 0                of: .integer #0
12: 0 0 0 0          bin1: .allocate #32
44: 0 0 0 0          bin2: .allocate #32
76: 0 0 0 0          bin3: .allocate #32
108: 1               endl: .integer #1
109: 10                  .integer #10
110: 41 1            tobinary: push r1
112: 41 2            push r2
114: 6 1 1           movrr r1 r1
117: 5 0 2           movir #0 r2
120: 34 1 2          cmprr r1 r2
123: 42 2            pop r2
125: 42 1            pop r1
127: 38 131          jmpp bnIF0
129: 28 136          jmp bnELSE0
131: 20 -1 1         bnIF0: mulir #-1 r1
134: 28 137          jmp bnEND0
136: 56              bnELSE0: nop
137: 56              bnEND0: nop
138: 1 7                 clrr r7
140: 5 32 9              movir #32 r9
143: 4 2 9               clrb r2 r9
146: 33 0 1              cmpir #0 r1
149: 37 212              jmpz tobinret
151: 12 32 2             addir #32 r2
154: 6 1 5           biniter: movrr r1 r5
157: 24 2 1              divir #2 r1
160: 6 1 8               movrr r1 r8
163: 20 2 1              mulir #2 r1
166: 34 1 5              cmprr r1 r5
169: 6 8 1               movrr r8 r1
172: 1 6                 clrr r6
174: 57 178              jmpne remainder1
176: 37 181              jmpz remainder0
178: 5 1 6           remainder1: movir #1 r6
181: 33 0 5          remainder0: cmpir #0 r5
184: 37 193              jmpz endbin
186: 41 6                push r6
188: 12 1 7              addir #1 r7
191: 28 154              jmp biniter
193: 17 7 2          endbin: subrr r7 r2
196: 42 6            ebiniter: pop r6
198: 53 6 2              movrx r6 r2
201: 12 1 2              addir #1 r2
204: 16 1 7              subir #1 r7
207: 33 0 7              cmpir #0 r7
210: 57 196              jmpne ebiniter
212: 40              tobinret: ret
213: 5 1 0           power: movir #1 r0
216: 33 0 2              cmpir #0 r2
219: 37 232              jmpz endpower
221: 21 1 0          poweriter: mulrr r1 r0
224: 16 1 2              subir #1 r2
227: 33 0 2              cmpir #0 r2
230: 57 221              jmpne poweriter
232: 40              endpower: ret
233: 12 31 1         todecimal: addir #31 r1
236: 1 0                 clrr r0
238: 1 5                 clrr r5
240: 9 1 6           todeciter: movxr r1 r6
243: 41 1                push r1
245: 41 2                push r2
247: 41 0                push r0
249: 5 2 1               movir #2 r1
252: 6 5 2               movrr r5 r2
255: 39 213              jsr power
257: 21 0 6              mulrr r0 r6
260: 42 0                pop r0
262: 42 2                pop r2
264: 42 1                pop r1
266: 13 6 0              addrr r6 r0    
269: 12 1 5              addir #1 r5
272: 16 1 1              subir #1 r1
275: 33 32 5             cmpir #32 r5
278: 57 240              jmpne todeciter
280: 40                  ret
281: 41 1            low16: push r1 ; call tobinary *r1 &bin2
283: 6 1 1               movrr r1 r1
286: 9 1 1               movxr r1 r1
289: 41 2                push r2
291: 10 44 2             movar bin2 r2
294: 39 110              jsr tobinary
296: 42 2                pop r2
298: 42 1                pop r1
300: 10 12 5             movar bin1 r5
303: 5 16 6              movir #16 r6
306: 4 5 6               clrb r5 r6
309: 10 12 1             movar bin1 r1
312: 39 233              jsr todecimal
314: 40                  ret
315: 41 1            high8: push r1 ; call tobinary *r1 &bin2
317: 6 1 1               movrr r1 r1
320: 9 1 1               movxr r1 r1
323: 41 2                push r2
325: 10 44 2             movar bin2 r2
328: 39 110              jsr tobinary
330: 42 2                pop r2
332: 42 1                pop r1
334: 10 12 5             movar bin1 r5
337: 12 16 5             addir #16 r5
340: 6 5 6               movrr r5 r6
343: 12 8 6              addir #8 r6
346: 5 8 7               movir #8 r7
349: 11 5 6 7            movb r5 r6 r7
353: 10 12 5             movar bin1 r5
356: 5 24 6              movir #24 r6
359: 4 5 6               clrb r5 r6
362: 10 12 1             movar bin1 r1
365: 39 233              jsr todecimal
367: 40                  ret
368: 41 1            low8: push r1 ; call tobinary *r1 &bin1
370: 6 1 1               movrr r1 r1
373: 9 1 1               movxr r1 r1
376: 41 2                push r2
378: 10 12 2             movar bin1 r2
381: 39 110              jsr tobinary
383: 42 2                pop r2
385: 42 1                pop r1
387: 10 12 5             movar bin1 r5
390: 5 24 6              movir #24 r6
393: 4 5 6               clrb r5 r6
396: 10 12 1             movar bin1 r1
399: 39 233              jsr todecimal
401: 40                  ret
402: 41 1            setlow16: push r1 ; call tobinary *r1 &bin1
404: 6 1 1               movrr r1 r1
407: 9 1 1               movxr r1 r1
410: 41 2                push r2
412: 10 12 2             movar bin1 r2
415: 39 110              jsr tobinary
417: 42 2                pop r2
419: 42 1                pop r1
421: 41 1                push r1 ; call tobinary r2 &bin2
423: 6 2 1               movrr r2 r1
426: 41 2                push r2
428: 10 44 2             movar bin2 r2
431: 39 110              jsr tobinary
433: 42 2                pop r2
435: 42 1                pop r1
437: 10 44 5             movar bin2 r5
440: 10 12 6             movar bin1 r6
443: 12 16 5             addir #16 r5
446: 12 16 6             addir #16 r6
449: 5 16 7              movir #16 r7
452: 11 5 6 7            movb r5 r6 r7
456: 41 1                push r1 ; call todecimal &bin1
458: 10 12 1             movar bin1 r1
461: 39 233              jsr todecimal
463: 42 1                pop r1
465: 53 0 1              movrx r0 r1
468: 40                  ret
469: 41 1            setlow8: push r1 ; call tobinary *r1 &bin1
471: 6 1 1               movrr r1 r1
474: 9 1 1               movxr r1 r1
477: 41 2                push r2
479: 10 12 2             movar bin1 r2
482: 39 110              jsr tobinary
484: 42 2                pop r2
486: 42 1                pop r1
488: 41 1                push r1 ; call tobinary r2 &bin2
490: 6 2 1               movrr r2 r1
493: 41 2                push r2
495: 10 44 2             movar bin2 r2
498: 39 110              jsr tobinary
500: 42 2                pop r2
502: 42 1                pop r1
504: 10 44 5             movar bin2 r5
507: 10 12 6             movar bin1 r6
510: 12 24 5             addir #24 r5
513: 12 24 6             addir #24 r6
516: 5 8 7               movir #8 r7
519: 11 5 6 7            movb r5 r6 r7
523: 41 1                push r1 ; call todecimal &bin1
525: 10 12 1             movar bin1 r1
528: 39 233              jsr todecimal
530: 42 1                pop r1
532: 53 0 1              movrx r0 r1
535: 40                  ret
536: 41 1            sethigh8: push r1 ; call tobinary *r1 &bin1
538: 6 1 1               movrr r1 r1
541: 9 1 1               movxr r1 r1
544: 41 2                push r2
546: 10 12 2             movar bin1 r2
549: 39 110              jsr tobinary
551: 42 2                pop r2
553: 42 1                pop r1
555: 41 1                push r1 ; call tobinary r2 &bin2
557: 6 2 1               movrr r2 r1
560: 41 2                push r2
562: 10 44 2             movar bin2 r2
565: 39 110              jsr tobinary
567: 42 2                pop r2
569: 42 1                pop r1
571: 10 44 5             movar bin2 r5
574: 10 12 6             movar bin1 r6
577: 12 24 5             addir #24 r5
580: 12 16 6             addir #16 r6
583: 5 8 7               movir #8 r7
586: 11 5 6 7            movb r5 r6 r7
590: 41 1                push r1 ; call todecimal &bin1
592: 10 12 1             movar bin1 r1
595: 39 233              jsr todecimal
597: 42 1                pop r1
599: 53 0 1              movrx r0 r1
602: 40                  ret
603: 41 1            x86push: push r1 ; addim #1 esp
605: 8 7 1               movmr esp r1
608: 12 1 1              addir #1 r1
611: 7 1 7               movrm r1 esp
614: 42 1                pop r1
616: 8 7 4               movmr esp r4
619: 53 1 4              movrx r1 r4
622: 40                  ret
623: 8 7 4           x86pop: movmr esp r4
626: 9 4 0               movxr r4 r0
629: 41 1                push r1 ; subim #1 esp
631: 8 7 1               movmr esp r1
634: 16 1 1              subir #1 r1
637: 7 1 7               movrm r1 esp
640: 42 1                pop r1
642: 40                  ret
643: 39 623          x86ret: jsr x86pop ; call x86pop
645: 10 654 4            movar retval r4
648: 12 1 4              addir #1 r4
651: 53 0 4              movrx r0 r4
654: 28 0            retval: jmp labelnull
656: 5 0 5           bitwiseand: movir #0 r5
659: 9 1 6           anditer: movxr r1 r6
662: 9 2 7               movxr r2 r7
665: 33 1 6              cmpir #1 r6
668: 57 682              jmpne andset0
670: 34 6 7              cmprr r6 r7
673: 37 677              jmpz andset1
675: 57 682              jmpne andset0
677: 5 1 8           andset1: movir #1 r8
680: 28 685              jmp andnoset
682: 5 0 8           andset0: movir #0 r8
685: 53 8 3          andnoset: movrx r8 r3
688: 12 1 1              addir #1 r1
691: 12 1 2              addir #1 r2
694: 12 1 3              addir #1 r3
697: 12 1 5              addir #1 r5
700: 33 32 5             cmpir #32 r5
703: 57 659              jmpne anditer
705: 40                  ret
706: 0 0 0 0         Ufinal: .allocate #4
710: 10 1594 1       x86init: movar LUAstr r1
713: 7 1 1599            movrm r1 Uhmm
716: 10 1601 1           movar programend r1
719: 12 100 1            addir #100 r1
722: 7 1 7               movrm r1 esp
725: 10 740 2            movar end r2
728: 12 2 2              addir #2 r2
731: 41 1                push r1 ; call x86push r2
733: 6 2 1               movrr r2 r1
736: 39 603              jsr x86push
738: 42 1                pop r1
740: 28 805          end: jmp Umain
742: 0                   halt 
743: 8 8 1           Uprint: movmr ebp r1
746: 41 1                push r1 ; call x86push r1
748: 6 1 1               movrr r1 r1
751: 39 603              jsr x86push
753: 42 1                pop r1
755: 8 7 1               movmr esp r1
758: 10 8 2              movar ebp r2
761: 53 1 2              movrx r1 r2
764: 10 8 1              movar ebp r1
767: 39 623              jsr x86pop ; call x86pop
769: 53 0 1              movrx r0 r1
772: 39 643              jsr x86ret ; call x86ret
774: 8 8 1           Uprinti: movmr ebp r1
777: 41 1                push r1 ; call x86push r1
779: 6 1 1               movrr r1 r1
782: 39 603              jsr x86push
784: 42 1                pop r1
786: 8 7 1               movmr esp r1
789: 10 8 2              movar ebp r2
792: 53 1 2              movrx r1 r2
795: 10 8 1              movar ebp r1
798: 39 623              jsr x86pop ; call x86pop
800: 53 0 1              movrx r0 r1
803: 39 643              jsr x86ret ; call x86ret
805: 8 8 1           Umain: movmr ebp r1
808: 41 1                push r1 ; call x86push r1
810: 6 1 1               movrr r1 r1
813: 39 603              jsr x86push
815: 42 1                pop r1
817: 8 7 1               movmr esp r1
820: 10 8 2              movar ebp r2
823: 53 1 2              movrx r1 r2
826: 8 6 1               movmr edi r1
829: 41 1                push r1 ; call x86push r1
831: 6 1 1               movrr r1 r1
834: 39 603              jsr x86push
836: 42 1                pop r1
838: 8 5 1               movmr esi r1
841: 41 1                push r1 ; call x86push r1
843: 6 1 1               movrr r1 r1
846: 39 603              jsr x86push
848: 42 1                pop r1
850: 41 2                push r2
852: 10 869 2            movar checkpoint0 r2
855: 12 2 2              addir #2 r2
858: 41 1                push r1 ; call x86push r2
860: 6 2 1               movrr r2 r1
863: 39 603              jsr x86push
865: 42 1                pop r1
867: 42 2                pop r2
869: 28 871          checkpoint0: jmp L2Dpb
871: 10 3 1          L2Dpb: movar ecx r1
874: 39 623              jsr x86pop ; call x86pop
876: 53 0 1              movrx r0 r1
879: 8 3 3               movmr ecx r3
882: 10 1593 4           movar Un r4
885: 13 4 1              addrr r4 r1
888: 10 871 5            movar L2Dpb r5
891: 17 5 1              subrr r5 r1
894: 6 3 1               movrr r3 r1
897: 9 1 1               movxr r1 r1
900: 10 5 2              movar esi r2
903: 53 1 2              movrx r1 r2
906: 8 5 1               movmr esi r1
909: 8 5 2               movmr esi r2
912: 41 1                push r1 ; call tobinary r1 &bin1
914: 6 1 1               movrr r1 r1
917: 41 2                push r2
919: 10 12 2             movar bin1 r2
922: 39 110              jsr tobinary
924: 42 2                pop r2
926: 42 1                pop r1
928: 41 1                push r1 ; call tobinary r2 &bin2
930: 6 2 1               movrr r2 r1
933: 41 2                push r2
935: 10 44 2             movar bin2 r2
938: 39 110              jsr tobinary
940: 42 2                pop r2
942: 42 1                pop r1
944: 41 1                push r1 ; call bitwiseand &bin1 &bin2 &bin3
946: 10 12 1             movar bin1 r1
949: 41 2                push r2
951: 10 44 2             movar bin2 r2
954: 41 3                push r3
956: 10 76 3             movar bin3 r3
959: 39 656              jsr bitwiseand
961: 42 3                pop r3
963: 42 2                pop r2
965: 42 1                pop r1
967: 41 1                push r1 ; call todecimal &bin3
969: 10 76 1             movar bin3 r1
972: 39 233              jsr todecimal
974: 42 1                pop r1
976: 3 10                clrm cf
978: 3 11                clrm of
980: 41 1            push r1
982: 41 2            push r2
984: 6 0 1           movrr r0 r1
987: 5 0 2           movir #0 r2
990: 34 1 2          cmprr r1 r2
993: 42 2            pop r2
995: 42 1            pop r1
997: 37 1001         jmpz bnIF1
999: 28 1013         jmp bnELSE1
1001: 41 1           bnIF1: push r1 ; zf = #1
1003: 5 1 1              movir #1 r1
1006: 7 1 9              movrm r1 zf
1009: 42 1               pop r1
1011: 28 1023        jmp bnEND1
1013: 41 1           bnELSE1: push r1 ; zf = #0
1015: 5 0 1              movir #0 r1
1018: 7 1 9              movrm r1 zf
1021: 42 1               pop r1
1023: 56             bnEND1: nop
1024: 41 1           push r1
1026: 41 2           push r2
1028: 10 9 1         movar zf r1
1031: 9 1 1          movxr r1 r1
1034: 5 1 2          movir #1 r2
1037: 34 1 2         cmprr r1 r2
1040: 42 2           pop r2
1042: 42 1           pop r1
1044: 37 1048        jmpz bnIF2
1046: 28 1052        jmp bnELSE2
1048: 28 1074        bnIF2: jmp LBB2U1
1050: 28 1053        jmp bnEND2
1052: 56             bnELSE2: nop
1053: 56             bnEND2: nop
1054: 8 5 1              movmr esi r1
1057: 10 4 2             movar edx r2
1060: 53 1 2             movrx r1 r2
1063: 5 1 1              movir #1 r1
1066: 10 6 2             movar edi r2
1069: 53 1 2             movrx r1 r2
1072: 28 1295            jmp LBB2U6
1074: 28 1528        LBB2U1: jmp LBB2U9
1076: 8 4 1          LBB2U4: movmr edx r1
1079: 10 1 2             movar eax r2
1082: 53 1 2             movrx r1 r2
1085: 5 1 1              movir #1 r1
1088: 10 6 2             movar edi r2
1091: 53 1 2             movrx r1 r2
1094: 8 6 1          LBB2U5: movmr edi r1
1097: 10 5 2             movar esi r2
1100: 41 1               push r1 ; addrx r1 r2
1102: 9 2 1              movxr r2 r1
1105: 13 1 1             addrr r1 r1
1108: 53 1 2             movrx r1 r2
1111: 42 1               pop r1
1113: 8 5 1              movmr esi r1
1116: 10 6 2             movar edi r2
1119: 41 1               push r1 ; addrx r1 r2
1121: 9 2 1              movxr r2 r1
1124: 13 1 1             addrr r1 r1
1127: 53 1 2             movrx r1 r2
1130: 42 1               pop r1
1132: 8 6 1              movmr edi r1
1135: 10 5 2             movar esi r2
1138: 41 1               push r1 ; addrx r1 r2
1140: 9 2 1              movxr r2 r1
1143: 13 1 1             addrr r1 r1
1146: 53 1 2             movrx r1 r2
1149: 42 1               pop r1
1151: 8 5 1              movmr esi r1
1154: 10 6 2             movar edi r2
1157: 41 1               push r1 ; addrx r1 r2
1159: 9 2 1              movxr r2 r1
1162: 13 1 1             addrr r1 r1
1165: 53 1 2             movrx r1 r2
1168: 42 1               pop r1
1170: 8 6 1              movmr edi r1
1173: 10 5 2             movar esi r2
1176: 41 1               push r1 ; addrx r1 r2
1178: 9 2 1              movxr r2 r1
1181: 13 1 1             addrr r1 r1
1184: 53 1 2             movrx r1 r2
1187: 42 1               pop r1
1189: 8 5 1              movmr esi r1
1192: 10 6 2             movar edi r2
1195: 41 1               push r1 ; addrx r1 r2
1197: 9 2 1              movxr r2 r1
1200: 13 1 1             addrr r1 r1
1203: 53 1 2             movrx r1 r2
1206: 42 1               pop r1
1208: 8 6 1              movmr edi r1
1211: 10 5 2             movar esi r2
1214: 41 1               push r1 ; addrx r1 r2
1216: 9 2 1              movxr r2 r1
1219: 13 1 1             addrr r1 r1
1222: 53 1 2             movrx r1 r2
1225: 42 1               pop r1
1227: 8 5 1              movmr esi r1
1230: 10 6 2             movar edi r2
1233: 41 1               push r1 ; addrx r1 r2
1235: 9 2 1              movxr r2 r1
1238: 13 1 1             addrr r1 r1
1241: 53 1 2             movrx r1 r2
1244: 42 1               pop r1
1246: 5 8 1              movir #8 r1
1249: 10 1 2             movar eax r2
1252: 41 1               push r1 ; addrx r1 r2
1254: 9 2 1              movxr r2 r1
1257: 13 1 1             addrr r1 r1
1260: 53 1 2             movrx r1 r2
1263: 42 1               pop r1
1265: 41 1           push r1
1267: 41 2           push r2
1269: 10 9 1         movar zf r1
1272: 9 1 1          movxr r1 r1
1275: 5 0 2          movir #0 r2
1278: 34 1 2         cmprr r1 r2
1281: 42 2           pop r2
1283: 42 1           pop r1
1285: 37 1289        jmpz bnIF3
1287: 28 1293        jmp bnELSE3
1289: 28 1094        bnIF3: jmp LBB2U5
1291: 28 1294        jmp bnEND3
1293: 56             bnELSE3: nop
1294: 56             bnEND3: nop
1295: 8 5 1          LBB2U6: movmr esi r1
1298: 10 1 2             movar eax r2
1301: 53 1 2             movrx r1 r2
1304: 8 4 1              movmr edx r1
1307: 8 4 2              movmr edx r2
1310: 41 1               push r1 ; call tobinary r1 &bin1
1312: 6 1 1              movrr r1 r1
1315: 41 2               push r2
1317: 10 12 2            movar bin1 r2
1320: 39 110             jsr tobinary
1322: 42 2               pop r2
1324: 42 1               pop r1
1326: 41 1               push r1 ; call tobinary r2 &bin2
1328: 6 2 1              movrr r2 r1
1331: 41 2               push r2
1333: 10 44 2            movar bin2 r2
1336: 39 110             jsr tobinary
1338: 42 2               pop r2
1340: 42 1               pop r1
1342: 41 1               push r1 ; call bitwiseand &bin1 &bin2 &bin3
1344: 10 12 1            movar bin1 r1
1347: 41 2               push r2
1349: 10 44 2            movar bin2 r2
1352: 41 3               push r3
1354: 10 76 3            movar bin3 r3
1357: 39 656             jsr bitwiseand
1359: 42 3               pop r3
1361: 42 2               pop r2
1363: 42 1               pop r1
1365: 41 1               push r1 ; call todecimal &bin3
1367: 10 76 1            movar bin3 r1
1370: 39 233             jsr todecimal
1372: 42 1               pop r1
1374: 3 10               clrm cf
1376: 3 11               clrm of
1378: 41 1           push r1
1380: 41 2           push r2
1382: 6 0 1          movrr r0 r1
1385: 5 0 2          movir #0 r2
1388: 34 1 2         cmprr r1 r2
1391: 42 2           pop r2
1393: 42 1           pop r1
1395: 37 1399        jmpz bnIF4
1397: 28 1411        jmp bnELSE4
1399: 41 1           bnIF4: push r1 ; zf = #1
1401: 5 1 1              movir #1 r1
1404: 7 1 9              movrm r1 zf
1407: 42 1               pop r1
1409: 28 1421        jmp bnEND4
1411: 41 1           bnELSE4: push r1 ; zf = #0
1413: 5 0 1              movir #0 r1
1416: 7 1 9              movrm r1 zf
1419: 42 1               pop r1
1421: 56             bnEND4: nop
1422: 41 1           push r1
1424: 41 2           push r2
1426: 10 9 1         movar zf r1
1429: 9 1 1          movxr r1 r1
1432: 5 1 2          movir #1 r2
1435: 34 1 2         cmprr r1 r2
1438: 42 2           pop r2
1440: 42 1           pop r1
1442: 37 1446        jmpz bnIF5
1444: 28 1450        jmp bnELSE5
1446: 28 1528        bnIF5: jmp LBB2U9
1448: 28 1451        jmp bnEND5
1450: 56             bnELSE5: nop
1451: 56             bnEND5: nop
1452: 8 6 1          LBB2U8: movmr edi r1
1455: 10 1 2             movar eax r2
1458: 53 1 2             movrx r1 r2
1461: 8 6 1              movmr edi r1
1464: 10 5 2             movar esi r2
1467: 41 1               push r1 ; addrx r1 r2
1469: 9 2 1              movxr r2 r1
1472: 13 1 1             addrr r1 r1
1475: 53 1 2             movrx r1 r2
1478: 42 1               pop r1
1480: 8 5 1              movmr esi r1
1483: 10 6 2             movar edi r2
1486: 53 1 2             movrx r1 r2
1489: 8 1 1              movmr eax r1
1492: 10 5 2             movar esi r2
1495: 53 1 2             movrx r1 r2
1498: 41 1           push r1
1500: 41 2           push r2
1502: 10 9 1         movar zf r1
1505: 9 1 1          movxr r1 r1
1508: 5 0 2          movir #0 r2
1511: 34 1 2         cmprr r1 r2
1514: 42 2           pop r2
1516: 42 1           pop r1
1518: 37 1522        jmpz bnIF6
1520: 28 1526        jmp bnELSE6
1522: 28 1452        bnIF6: jmp LBB2U8
1524: 28 1527        jmp bnEND6
1526: 56             bnELSE6: nop
1527: 56             bnEND6: nop
1528: 8 3 3          LBB2U9: movmr ecx r3
1531: 10 1600 4          movar LUfinalDnonUlazyUptr r4
1534: 13 4 1             addrr r4 r1
1537: 10 871 5           movar L2Dpb r5
1540: 17 5 1             subrr r5 r1
1543: 6 3 1              movrr r3 r1
1546: 9 1 1              movxr r1 r1
1549: 10 3 2             movar ecx r2
1552: 53 1 2             movrx r1 r2
1555: 8 1 1              movmr eax r1
1558: 8 3 3              movmr ecx r3
1561: 6 3 2              movrr r3 r2
1564: 53 1 2             movrx r1 r2
1567: 10 5 1             movar esi r1
1570: 39 623             jsr x86pop ; call x86pop
1572: 53 0 1             movrx r0 r1
1575: 10 6 1             movar edi r1
1578: 39 623             jsr x86pop ; call x86pop
1580: 53 0 1             movrx r0 r1
1583: 10 8 1             movar ebp r1
1586: 39 623             jsr x86pop ; call x86pop
1588: 53 0 1             movrx r0 r1
1591: 39 643             jsr x86ret ; call x86ret
1593: 5              Un: .integer #5
1594: 4 104 109 109  LUAstr: .string "hmmm"
1599: 0              Uhmm: .integer #0
1600: 0              LUfinalDnonUlazyUptr: .integer #0

Symbol Table:
ebp 8 
tobinret 212 
ebiniter 196 
checkpoint0 869 
remainder1 178 
x86push 603 
labelnull 0 
anditer 659 
l2dpb 871 
todecimal 233 
uprinti 774 
x86pop 623 
bnelse3 1293 
lbb2u6 1295 
bnend0 137 
bnelse5 1450 
bnend5 1451 
bnif6 1522 
bnelse6 1526 
biniter 154 
bnif4 1399 
power 213 
lbb2u1 1074 
bnend3 1294 
lbb2u8 1452 
umain 805 
bnif2 1048 
retval 654 
un 1593 
andset0 682 
lbb2u4 1076 
lbb2u9 1528 
todeciter 240 
bitwiseand 656 
bnend1 1023 
bnend2 1053 
bin1 12 
uhmm 1599 
poweriter 221 
setlow8 469 
high8 315 
ufinal 706 
of 11 
esp 7 
tobinary 110 
luastr 1594 
programend 1601 
sethigh8 536 
endpower 232 
bnelse2 1052 
bnend6 1527 
bnif1 1001 
bnelse1 1013 
low8 368 
bnif3 1289 
andnoset 685 
ebx 2 
bnif5 1446 
andset1 677 
low16 281 
cf 10 
bnelse4 1411 
bnend4 1421 
end 740 
esi 5 
endl 108 
edi 6 
edx 4 
lbb2u5 1094 
eax 1 
ecx 3 
bnelse0 136 
setlow16 402 
bin3 76 
x86ret 643 
uprint 743 
remainder0 181 
lufinaldnonulazyuptr 1600 
bin2 44 
x86init 710 
bnif0 131 
endbin 193 
zf 9 
