Question about the compiler output to this program:
```c
int bees;
int main() {
    bees = 4;
    return bees;
}
```
```x86asm
_main:                                  ## @main
    push    ebp
    call    L0$pb
L0$pb:
    pop    eax
    mov    eax, dword ptr [eax + L_bees$non_lazy_ptr-L0$pb]
    mov    dword ptr [eax], 4
    mov    eax, 4
    pop    ebp
    ret
L_bees$non_lazy_ptr:
    .long    0
```
When subroutine `L0$pb` gets called and then returns on line 10, what happens to the _main subroutine? In other words, if there are two subroutines and only one `ret` statement, shouldn't the behavior of this program be:
1. run push ebp in `_main`
2. jump to `L0$pb`
3. return from `L0$pb`
4. continue execution into `L0$pb`, since there's nothing between call and the `L0$pb` label
5. run `L0$pb` for the second time and `ret` from `_main`
sorry if this is poorly worded