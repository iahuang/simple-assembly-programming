; Code autogenerated by SAPplus
.start begin
startTuples: nop
.Tuple \ 0 _ 0 _ r \
.Tuple \ 0 X 0 A r \
.Tuple \ 0 . 0 . r \
.Tuple \ 0 Y 0 B r \
.Tuple \ 0 + 1 + l \
.Tuple \ 1 B 1 D l \
.Tuple \ 1 . 1 . l \
.Tuple \ 1 A 1 C l \
endTuples: nop
numTuples: .integer #0
tupleSearchIndex: .integer #0
tape: .allocate #100
initialString: .string "_XX.YYY+"
head: .integer #0
state: .integer #0
steps: .integer #0
welcome: .string "Welcome to Turing!"
tuplesTitle: .string "Tuples:"
initialstate: .string "Initial State: "
initialhead: .string "Initial Tape Head: "
initialtape: .string "Initial Tape: "
done: .string "Turing run complete"
finaltape: .string "Final Tape: "
thattook: .string "That took "
nsteps: .string " steps"
newline: .integer #1
.integer #10 
space: .string " "
leftbracket: .string "["
rightbracket: .string "]"
copyInitial: movar initialString r5 ;
    movmr initialString r6
    addir #1 r5
    movar tape r7
    movb r5 r7 r6
    ret
begin: movar endTuples r1
    movar startTuples r2
    addir #1 r2
    subrr r2 r1
    divir #5 r1
    movrm r1 numTuples
    jsr copyInitial
    $println welcome
..........Expected Instruction or Directive
    outs newline
    $println tuplesTitle
..........Expected Instruction or Directive
    clrr r1
printNextTuple: jsr printTuple
    outs newline
    addir #1 r1
    movmr numTuples r2
    cmprr r1 r2
    jmpz endPrint
    jmp printNextTuple
endPrint: outs initialstate
    $printm state
..........Expected Instruction or Directive
    outs newline
    outs initialhead
    $printm head
..........Expected Instruction or Directive
    outs newline
    outs initialtape
    outs initialString
    outs newline
    outs newline
startTuring: nop
runIteration: clrm tupleSearchIndex
searchTuples: movmr head r1
    movar tape r3
    addrr r3 r1
    movxr r1 r2
    movmr tupleSearchIndex r3
    mulir #5 r3
    movar startTuples r4
    addir #1 r3
    addrr r4 r3
    movxr r3 r4
    cmpmr state r4
    jmpne skipTuple
    $nextTupleValue
..........Expected Instruction or Directive
    cmprr r4 r2
    jmpne skipTuple
    $nextTupleValue
..........Expected Instruction or Directive
    movrm r4 state
    $nextTupleValue
..........Expected Instruction or Directive
    movmr head r5
    movar tape r6
    addrr r6 r5
    movrx r4 r5
    $nextTupleValue
..........Expected Instruction or Directive
    movmr head r1
    addrr r4 r1
    movrm r1 head
    movmr head r5
    subrr r4 r5
    movar tape r1
    clrr r4
headedTapeDisplayIter: movxr r1 r3
    cmprr r5 r4
    jmpne noHead
    outs leftbracket
    outcr r3
    outs rightbracket
    jmp finishDrawingHeadOrNot
noHead: outcr r3
finishDrawingHeadOrNot: cmpir #100 r1
    $incr r1
..........Expected Instruction or Directive
    $incr r4
..........Expected Instruction or Directive
    jmpne headedTapeDisplayIter
    outs space
    movmr tupleSearchIndex r1
    jsr printTuple
    outs newline
    $incm steps
..........Expected Instruction or Directive
    jmp endSearch
skipTuple: $incm tupleSearchIndex
..........Expected Instruction or Directive
    movmr numTuples r1
    cmpmr tupleSearchIndex r1
    jmpz stop
    jmp searchTuples
endSearch: jmp runIteration
printTuple: movrr r1 r5
    mulir #5 r5
    movar startTuples r6
    addir #1 r6
    addrr r6 r5
    movxr r5 r7
    printi r7
    outs space
    addir #1 r5
    movxr r5 r7
    outcr r7
    outs space
    addir #1 r5
    movxr r5 r7
    printi r7
    outs space
    addir #1 r5
    movxr r5 r7
    outcr r7
    outs space
    addir #1 r5
    movxr r5 r7
    printi r7
    outs space
    addir #1 r5
    movxr r5 r7
    ret
memoryDump: movrr r1 r4
mdumpIter: movxr r4 r3
    outcr r3
    $incr r4
..........Expected Instruction or Directive
    cmprr r4 r2
    jmpne mdumpIter
    ret
stop: $println done
..........Expected Instruction or Directive
    outs finaltape
    $printTape
..........Expected Instruction or Directive
    outs newline
    outs thattook
    $printm steps
..........Expected Instruction or Directive
    outs nsteps
    outs newline
    halt
