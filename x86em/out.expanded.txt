; Code autogenerated by SAPplus

.start x86init
labelnull: nop
eax: .integer #3
ebx: .integer #0
ecx: .integer #0
edx: .integer #0
esi: .integer #0
edi: .integer #0
esp: .integer #0
ebp: .integer #0
bin1: .allocate #32
bin2: .allocate #32
endl: .integer #1
    .integer #10
tobinary: clrr r7
    movir #32 r9
    clrb r2 r9
    cmpir #0 r1
    jmpz tobinret
    addir #32 r2
biniter: movrr r1 r5
    divir #2 r1
    movrr r1 r8
    mulir #2 r1
    cmprr r1 r5
    movrr r8 r1
    clrr r6
    jmpne remainder1
    jmpz remainder0
remainder1: movir #1 r6
remainder0: cmpir #0 r5
    jmpz endbin
    push r6
    addir #1 r7
    jmp biniter
endbin: subrr r7 r2
ebiniter: pop r6
    movrx r6 r2
    addir #1 r2
    subir #1 r7
    cmpir #0 r7
    jmpne ebiniter
tobinret: ret
power: movir #1 r0
    cmpir #0 r2
    jmpz endpower
poweriter: mulrr r1 r0
    subir #1 r2
    cmpir #0 r2
    jmpne poweriter
endpower: ret
todecimal: addir #31 r1
    clrr r0
    clrr r5
todeciter: movxr r1 r6
    push r1
    push r2
    push r0
    movir #2 r1
    movrr r5 r2
    jsr power
    mulrr r0 r6
    pop r0
    pop r2
    pop r1
    addrr r6 r0    
    addir #1 r5
    subir #1 r1
    cmpir #32 r5
    jmpne todeciter
    ret
low16: push r1 ; call tobinary *r1 &bin2
    movrr r1 r1
    movxr r1 r1
    push r2
    movar bin2 r2
    jsr tobinary
    pop r2
    pop r1
    movar bin1 r5
    movir #16 r6
    clrb r5 r6
    movar bin1 r1
    jsr todecimal
    ret
high8: push r1 ; call tobinary *r1 &bin2
    movrr r1 r1
    movxr r1 r1
    push r2
    movar bin2 r2
    jsr tobinary
    pop r2
    pop r1
    movar bin1 r5
    addir #16 r5
    movrr r5 r6
    addir #8 r6
    movir #8 r7
    movb r5 r6 r7
    movar bin1 r5
    movir #24 r6
    clrb r5 r6
    movar bin1 r1
    jsr todecimal
    ret
low8: push r1 ; call tobinary *r1 &bin1
    movrr r1 r1
    movxr r1 r1
    push r2
    movar bin1 r2
    jsr tobinary
    pop r2
    pop r1
    movar bin1 r5
    movir #24 r6
    clrb r5 r6
    movar bin1 r1
    jsr todecimal
    ret
setlow16: push r1 ; call tobinary *r1 &bin1
    movrr r1 r1
    movxr r1 r1
    push r2
    movar bin1 r2
    jsr tobinary
    pop r2
    pop r1
    push r1 ; call tobinary r2 &bin2
    movrr r2 r1
    push r2
    movar bin2 r2
    jsr tobinary
    pop r2
    pop r1
    movar bin2 r5
    movar bin1 r6
    addir #16 r5
    addir #16 r6
    movir #16 r7
    movb r5 r6 r7
    push r1 ; call todecimal &bin1
    movar bin1 r1
    jsr todecimal
    pop r1
    movrx r0 r1
    ret
setlow8: push r1 ; call tobinary *r1 &bin1
    movrr r1 r1
    movxr r1 r1
    push r2
    movar bin1 r2
    jsr tobinary
    pop r2
    pop r1
    push r1 ; call tobinary r2 &bin2
    movrr r2 r1
    push r2
    movar bin2 r2
    jsr tobinary
    pop r2
    pop r1
    movar bin2 r5
    movar bin1 r6
    addir #24 r5
    addir #24 r6
    movir #8 r7
    movb r5 r6 r7
    push r1 ; call todecimal &bin1
    movar bin1 r1
    jsr todecimal
    pop r1
    movrx r0 r1
    ret
sethigh8: push r1 ; call tobinary *r1 &bin1
    movrr r1 r1
    movxr r1 r1
    push r2
    movar bin1 r2
    jsr tobinary
    pop r2
    pop r1
    push r1 ; call tobinary r2 &bin2
    movrr r2 r1
    push r2
    movar bin2 r2
    jsr tobinary
    pop r2
    pop r1
    movar bin2 r5
    movar bin1 r6
    addir #24 r5
    addir #16 r6
    movir #8 r7
    movb r5 r6 r7
    push r1 ; call todecimal &bin1
    movar bin1 r1
    jsr todecimal
    pop r1
    movrx r0 r1
    ret
x86push: push r1 ; addim #1 esp
    movmr esp r1
    addir #1 r1
    movrm r1 esp
    pop r1
    movmr esp r4
    movrx r1 r4
    ret
x86pop: movmr esp r4
    movxr r4 r0
    push r1 ; subim #1 esp
    movmr esp r1
    subir #1 r1
    movrm r1 esp
    pop r1
    ret
x86ret: jsr x86pop ; call x86pop
    movar retval r4
    addir #1 r4
    movrx r0 r4
retval: jmp labelnull
test: movar eax r1
    jsr low8
    printi r0
    outs endl
    push r1 ; call sethigh8 &eax #122
    movar eax r1
    push r2
    movir #122 r2
    jsr sethigh8
    pop r2
    pop r1
    movmr eax r6
    printi r6
    outs endl
Ubees: .allocate #4
x86init: movar programend r1
    addir #100 r1
    movrm r1 esp
    movar end r2
    addir #2 r2
    push r1 ; call x86push r2
    movrr r2 r1
    jsr x86push
    pop r1
end: jmp Umain
    movmr Ubees r1 
    printi r1 
    halt 
Umain: movmr ebp r1
    push r1 ; call x86push r1
    movrr r1 r1
    jsr x86push
    pop r1
    brk
    movmr esp r1
    movar ebp r2
    movrx r1 r2
    brk
    push r2
    movar checkpoint0 r2
    addir #2 r2
    push r1 ; call x86push r2
    movrr r2 r1
    jsr x86push
    pop r1
    pop r2
    brk
checkpoint0: jmp L0Dpb
L0Dpb: movar eax r1
    jsr x86pop ; call x86pop
    movrx r0 r1
    brk
    movmr eax r3
    movar LUbeesDnonUlazyUptr r4
    addrr r4 r1
    movar L0Dpb r5
    subrr r5 r1
    movrr r3 r1
    movxr r1 r1
    movar eax r2
    movrx r1 r2
    brk
    movir #69420 r1
    movmr eax r3
    movrr r3 r2
    movrx r1 r2
    brk
    movir #69420 r1
    movar eax r2
    movrx r1 r2
    brk
    movar ebp r1
    jsr x86pop ; call x86pop
    movrx r0 r1
    brk
    jsr x86ret ; call x86ret
LUbeesDnonUlazyUptr: .integer #0
programend: nop