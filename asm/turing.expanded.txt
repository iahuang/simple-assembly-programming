.start begin

startTuples: nop
.Tuple \ 12 x 13 y l \
endTuples: nop

tupleSearchIndex: .integer #0

tape: .allocate #100
initialString: .string "_010101_"

head: .integer #0
state: .integer #0

copyInitial: nop
    movar initialString r5 ;
    movxr r5 r6
    addir #1 r5
    movar tape r7
    movb r5 r7 r6
    ret

begin: nop
    jsr copyInitial

runIteration: nop
    clrm tupleSearchIndex

searchTuples: nop
    movmr head r1 ; move character at head to r2
    movxr r1 r2

    movmr tupleSearchIndex r3 ; r3 stores the pointer to a specific value (nextState, direction, etc) in the tuple being searched
    mulir #5 r3
    movar startTuples r4
    addrr r4 r3
    movxr r3 r4 ; r4 stores said specific value

    cmpmr state r4 ; check whether tape matches
    jmpne skipTuple

    addir #1 r3
movxr r3 r4

    cmprr r4 r2 ; checks whether tape character matches
    jmpne skipTuple

    addir #1 r3
movxr r3 r4

    movrm r4 state ; set new state

    addir #1 r3
movxr r3 r4

    movmr head r5 ; set new character
    movrx r4 r5 

    addir #1 r3
movxr r3 r4

    movmr head r1 ; move head
    addrr r4 r1
    movrm r1 head
    jmp endSearch
    
skipTuple: nop
    push r1
movmr tupleSearchIndex r1
addir #1 r1
movrm r1 tupleSearchIndex
pop r1
    movar endTuples r1
    addir #1 r1
    movar startTuples r2
    subrr r2 r1
    divir #5 r1
    cmpmr tupleSearchIndex r1
    jmpz endSearch
    jmp searchTuples

endSearch: ret
