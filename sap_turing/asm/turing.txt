.start begin

startTuples: nop
.Tuple \ 0 _ 0 _ r \
.Tuple \ 0 1 1 0 r \
.Tuple \ 0 0 1 1 r \
.Tuple \ 1 0 1 1 r \
.Tuple \ 1 1 1 0 r \
endTuples: nop

tupleSearchIndex: .integer #0

tape: .allocate #100
initialString: .string "_010101_"

head: .integer #0
state: .integer #0

mess1: .string "Welcome to Turing!"
mess2: .string "Tuples:"
mess3: .string "r1"
newline: .integer #1
.integer #10 

bp: .string "HMMM"

copyInitial:
    movar initialString r5 ;
    movmr initialString r6
    addir #1 r5
    movar tape r7
    movb r5 r7 r6
    ret

begin:
    outs mess1
    jsr copyInitial

runIteration:
    clrm tupleSearchIndex

searchTuples:
    movmr head r1 ; move character at head to r2
    movxr r1 r2

    movmr tupleSearchIndex r3 ; r3 stores the pointer to a specific value (nextState, direction, etc) in the tuple being searched
    mulir #5 r3
    movar startTuples r4
    addrr r4 r3
    movxr r3 r4 ; r4 stores said specific value

    cmpmr state r4 ; check whether tape matches
    jmpne skipTuple

    $nextTupleValue

    cmprr r4 r2 ; checks whether tape character matches
    jmpne skipTuple

    $nextTupleValue

    movrm r4 state ; set new state

    $nextTupleValue

    movmr head r5 ; set new character
    movrx r4 r5 

    $nextTupleValue

    movmr head r1 ; move head
    addrr r4 r1
    movrm r1 head

    jmp endSearch

memoryDump:
    movrr r1 r4

mdumpIter:
    movxr r4 r3
    outcr r3
    $incr r4
    cmprr r4 r2
    jmpne mdumpIter
    ret


skipTuple:
    $incm tupleSearchIndex

    movar endTuples r1
    addir #1 r1

    movar startTuples r2
    subrr r2 r1
    divir #5 r1
    cmpmr tupleSearchIndex r1
    jmpz stop
    jmp searchTuples

endSearch: jmp runIteration

stop:
    movar tape r1
    movir #100 r2
    jsr memoryDump
    halt
