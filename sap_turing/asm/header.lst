0:                   
0: 4294967295        eax: .integer #4294967295 
1: 0                 ebx: .integer #0
2: 0                 ecx: .integer #0
3: 0                 edx: .integer #0
4: 0                 esi: .integer #0
5: 0                 edi: .integer #0
6: 0                 esp: .integer #0
7: 0                 ebp: .integer #0
8: 0 0 0 0           bin1: .allocate #32
40: 1                endl: .integer #1
41: 10                   .integer #10
42: 56               tobinary: nop
43:                      ; r1 is the value
43:                      ; r2 is the pointer to the bytedump
43:                      ; r5 is a copy of r1
43:                      ; r6 is the remainder
43:                      ; r7 is the number of bits pushed
43:                      ; r8 is r1/2
43: 1 7                  clrr r7
45: 12 32 2              addir #32 r2
48: 56               biniter: nop
49: 6 1 5                movrr r1 r5
52: 24 2 1               divir #2 r1
55: 6 1 8                movrr r1 r8
58: 20 2 1               mulir #2 r1
61: 34 1 5               cmprr r1 r5
64: 6 8 1                movrr r8 r1
67: 1 6                  clrr r6
69: 57 73                jmpne remainder1 ; if remainder is 1
71: 37 77                jmpz remainder0 ; if remainder is 0
73: 56               remainder1: nop
74: 5 1 6                movir #1 r6
77: 56               remainder0: nop
78: 33 0 5               cmpir #0 r5
81: 37 90                jmpz endbin
83: 41 6                 push r6
85: 12 1 7               addir #1 r7
88: 28 48                jmp biniter
90: 56               endbin: nop
91: 17 7 2               subrr r7 r2
94: 56               ebiniter: nop
95: 42 6                 pop r6
97: 53 6 2               movrx r6 r2
100: 12 1 2              addir #1 r2
103: 16 1 7              subir #1 r7
106: 33 0 7              cmpir #0 r7
109: 57 94               jmpne ebiniter
111:                     
111: 40                  ret
112: 56              power: nop
113:                     ; r0 a^b
113:                     ; r1 a
113:                     ; r2 b
113: 5 1 0               movir #1 r0
116: 33 0 2              cmpir #0 r2
119: 37 133              jmpz endpower
121: 56              poweriter: nop
122: 21 1 0              mulrr r1 r0
125: 16 1 2              subir #1 r2
128: 33 0 2              cmpir #0 r2
131: 57 121              jmpne poweriter
133: 56              endpower: nop
134: 40                  ret
135: 56              todecimal: nop
136:                     ; r0 total
136:                     ; r1 pointer to the bytedump
136:                     ; r5 the exponent
136:                     ; r6 digit term (n*2^x)
136: 12 31 1             addir #31 r1
139: 1 0                 clrr r0
141: 1 5                 clrr r5
143: 56              todeciter: nop
144: 9 1 6               movxr r1 r6
147: 41 1                push r1
149: 41 2                push r2
151: 41 0                push r0
153: 5 2 1               movir #2 r1
156: 6 5 2               movrr r5 r2
159: 39 112              jsr power
161: 21 0 6              mulrr r0 r6
164: 42 0                pop r0
166: 42 2                pop r2
168: 42 1                pop r1
170: 13 6 0              addrr r6 r0    
173:                     
173: 12 1 5              addir #1 r5
176: 16 1 1              subir #1 r1
179: 33 32 5             cmpir #32 r5
182: 57 143              jmpne todeciter
184: 40                  ret
185: 56              low16: nop
186:                     ; r1 address of eNx register where N is a-d
186: 9 1 1               movxr r1 r1
189: 41 2                push r2
191: 10 8 2              movar bin1 r2
194: 39 42               jsr tobinary
196: 42 2                pop r2
198: 10 8 5              movar bin1 r5
201: 5 16 6              movir #16 r6
204: 4 5 6               clrb r5 r6
207: 10 8 1              movar bin1 r1
210: 39 135              jsr todecimal
212: 40                  ret
213: 56              high8: nop
214:                     ; r1 address of eNx register where N is a-d
214: 9 1 1               movxr r1 r1
217: 41 2                push r2
219: 10 8 2              movar bin1 r2
222: 39 42               jsr tobinary
224: 42 2                pop r2
226: 10 8 5              movar bin1 r5
229: 6 5 6               movrr r5 r6
232: 12 24 6             addir #24 r6
235: 5 8 7               movir #8 r7
238: 10 8 5              movar bin1 r5
241: 5 24 6              movir #24 r6
244: 4 5 6               clrb r5 r6
247: 11 5 6 7            movb r5 r6 r7
251: 10 8 1              movar bin1 r1
254: 39 135              jsr todecimal
256: 40                  ret
257: 56              low8: nop
258:                     ; r1 address of eNx register where N is a-d
258: 9 1 1               movxr r1 r1
261: 41 2                push r2
263: 10 8 2              movar bin1 r2
266: 39 42               jsr tobinary
268: 42 2                pop r2
270: 10 8 5              movar bin1 r5
273: 5 24 6              movir #24 r6
276: 4 5 6               clrb r5 r6
279: 10 8 1              movar bin1 r1
282: 39 135              jsr todecimal
284: 40                  ret
285: 56              main: nop
286: 10 0 1              movar eax r1
289: 39 213              jsr high8
291: 49 0                printi r0

Symbol Table:
ebp 7 
main 285 
ebiniter 94 
esp 6 
tobinary 42 
remainder1 73 
endpower 133 
todecimal 135 
low8 257 
ebx 1 
biniter 48 
power 112 
low16 185 
esi 4 
todeciter 143 
endl 40 
edi 5 
edx 3 
bin1 8 
eax 0 
ecx 2 
poweriter 121 
remainder0 77 
high8 213 
endbin 90 
