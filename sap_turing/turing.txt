.start begin

startTuples: nop
.Tuple \ 0 _ 0 _ r \
.Tuple \ 0 X 0 A r \
.Tuple \ 0 . 0 . r \
.Tuple \ 0 Y 0 B r \
.Tuple \ 0 + 1 + l \
.Tuple \ 1 B 1 D l \
.Tuple \ 1 . 1 . l \
.Tuple \ 1 A 1 C l \
endTuples: nop
numTuples: .integer #0

tupleSearchIndex: .integer #0

tape: .allocate #100
initialString: .string "_XX.YYY+"

head: .integer #0
state: .integer #0
steps: .integer #0

welcome: .string "Welcome to Turing!"
tuplesTitle: .string "Tuples:"
initialstate: .string "Initial State: "
initialhead: .string "Initial Tape Head: "
initialtape: .string "Initial Tape: "
done: .string "Turing run complete"
finaltape: .string "Final Tape: "
thattook: .string "That took "
nsteps: .string " steps"

newline: .integer #1
.integer #10
space: .string " "
leftbracket: .string "["
rightbracket: .string "]"

copyInitial: nop
   movar initialString r5
   movmr initialString r6
   addir #1 r5
   movar tape r7
   movb r5 r7 r6
   ret

begin: nop
   movar endTuples r1
   movar startTuples r2
   addir #1 r2
   subrr r2 r1
   divir #5 r1
   movrm r1 numTuples
   jsr copyInitial
   outs welcome
   outs newline
   outs newline
   outs tuplesTitle
   outs newline
   clrr r1

printNextTuple: nop
   jsr printTuple
   outs newline
   addir #1 r1
   movmr numTuples r2
   cmprr r1 r2
   jmpz endPrint
   jmp printNextTuple

endPrint: nop
   outs initialstate
   push r1
   movmr state r1
   printi r1
   pop r1
   outs newline
   outs initialhead
   push r1
   movmr head r1
   printi r1
   pop r1
   outs newline
   outs initialtape
   outs initialString
   outs newline
   outs newline

startTuring: nop
   nop

runIteration: nop
   clrm tupleSearchIndex

searchTuples: nop
   movmr head r1 ; move character at head to r2
   movar tape r3
   addrr r3 r1
   movxr r1 r2
   movmr tupleSearchIndex r3
   mulir #5 r3
   movar startTuples r4
   addir #1 r3
   addrr r4 r3
   movxr r3 r4 ; r4 stores said specific value
   cmpmr state r4 ; check whether state matches
   jmpne skipTuple
   addir #1 r3
   movxr r3 r4
   cmprr r4 r2 ; checks whether tape character matches
   jmpne skipTuple
   addir #1 r3
   movxr r3 r4
   movrm r4 state ; set new state
   addir #1 r3
   movxr r3 r4
   movmr head r5 ; set new character
   movar tape r6
   addrr r6 r5
   movrx r4 r5
   addir #1 r3
   movxr r3 r4
   movmr head r1 ; move head
   addrr r4 r1
   movrm r1 head
   movmr head r5 ; head before being moved
   subrr r4 r5
   movar tape r1 ; tape pointer
   clrr r4 ; tape index, starting from 0

headedTapeDisplayIter: nop
   movxr r1 r3 ; r3 is the tape character
   cmprr r5 r4
   jmpne noHead
   outs leftbracket
   outcr r3
   outs rightbracket
   jmp finishDrawingHeadOrNot
noHead: nop
   outcr r3
finishDrawingHeadOrNot: nop
   cmpir #100 r1
   addir #1 r1
   addir #1 r4
   jmpne headedTapeDisplayIter
   outs space
   movmr tupleSearchIndex r1
   jsr printTuple
   outs newline
   push r1
   movmr steps r1
   addir #1 r1
   movrm r1 steps
   pop r1
   jmp endSearch

skipTuple: nop
   push r1
   movmr tupleSearchIndex r1
   addir #1 r1
   movrm r1 tupleSearchIndex
   pop r1
   movmr numTuples r1
   cmpmr tupleSearchIndex r1
   jmpz stop
   jmp searchTuples

endSearch: jmp runIteration

printTuple: nop
   movrr r1 r5
   mulir #5 r5
   movar startTuples r6
   addir #1 r6
   addrr r6 r5
   movxr r5 r7
   printi r7 ; current state
   outs space
   addir #1 r5
   movxr r5 r7
   outcr r7 ; current character
   outs space
   addir #1 r5
   movxr r5 r7
   printi r7 ; new state
   outs space
   addir #1 r5
   movxr r5 r7
   outcr r7
   outs space ; new character
   addir #1 r5
   movxr r5 r7
   printi r7
   outs space ; direction
   addir #1 r5
   movxr r5 r7
   ret

memoryDump: nop
   movrr r1 r4

mdumpIter: nop
   movxr r4 r3
   outcr r3
   addir #1 r4
   cmprr r4 r2
   jmpne mdumpIter
   ret

stop: nop
   outs done
   outs newline
   outs finaltape
   push r1
   push r2
   movar tape r1
   movir #100 r2
   jsr memoryDump
   pop r2
   pop r1
   outs newline
   outs thattook
   push r1
   movmr steps r1
   printi r1
   pop r1
   outs nsteps
   outs newline
   halt
